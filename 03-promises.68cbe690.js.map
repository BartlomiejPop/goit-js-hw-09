{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAUC,SAASC,cAAc,uBACjCC,EAASF,SAASC,cAAc,sBAChCE,EAAWH,SAASC,cAAc,wBAClCG,EAAYJ,SAASC,cAAc,yBACzC,IAGII,EAHAC,EAAU,EACVC,EAAc,EACdC,EAAW,EAkCXJ,EAAMK,iBAAiB,SAAS,KAClCC,YAAW,KACTL,EAAaM,YAAYC,EAAcV,EAAOW,MAAM,GACnDd,EAAQc,OAEX,MAAMD,EAAe,KA7BE,IAACE,EAAUC,GAAVD,EA8BLN,EA9BeO,GA8BJhB,EAAQc,QAASX,EAAOW,MAAQN,EA7BvD,IAAIS,SAAQ,CAACC,EAASC,KAQLC,KAAKC,SAAW,GAGpCH,EAAQ,uBAAqBH,QAAiBC,OAG9CG,EAAO,sBAAoBJ,QAAiBC,MAAU,KAgBrDM,MAAKJ,GAAWpB,EAAAyB,OAAOC,QAAQN,KAC/BO,OAAMC,GAAS5B,EAAAyB,OAAOI,QAAQD,KACjClB,IACAD,IACAE,KACKF,IAAaH,EAASU,QACzBP,EAAU,EACVE,EAAW,EACXD,EAAc,EACdoB,cAActB,G,CAEjB","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst delayEl = document.querySelector(\"input[name='delay']\");\nconst stepEl = document.querySelector(\"input[name='step']\");\nconst amountEl = document.querySelector(\"input[name='amount']\");\nconst submitBtn = document.querySelector(\"button[type='button']\");\nlet counter = 0;\nlet timeCounter = 1;\nlet position = 1;\nlet intervalID;\n\n// const intervalID = setInterval(\n//   myCallback,\n//   stepEl.value,\n//   'Parameter 1',\n//   'Parameter 2'\n// );\n\nconst generatePromises = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    // function createPromise(position, delay) {\n    // const intervalID = setInterval(\n    //   createResults,\n    //   stepEl.value,\n    //   amountEl.value\n    // );\n\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      // Fulfill\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      // Reject\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n\n    // }\n  });\n};\n\n//Dodać do funcki setInterval ,bo teraz zwraca tylko jedną wartość\n\nsubmitBtn.addEventListener('click', () => {\n  setTimeout(() => {\n    intervalID = setInterval(handleResult, stepEl.value);\n  }, delayEl.value);\n\n  const handleResult = () => {\n    generatePromises(position, +delayEl.value + +stepEl.value * timeCounter)\n      .then(resolve => Notify.success(resolve))\n      .catch(error => Notify.failure(error));\n    timeCounter++;\n    counter++;\n    position++;\n    if (+counter === +amountEl.value) {\n      counter = 0;\n      position = 1;\n      timeCounter = 1;\n      clearInterval(intervalID);\n    }\n  };\n});\n\n// .then(\n//   setTimeout(() => {\n//     setInterval(\n//       Notify.success(\n//         `✅ Fulfilled promise ${position} in ${delayEl.value}ms`\n//       ),\n//       stepEl.value\n//     );\n//   }, delayEl.value)\n// )\n// .catch(\n//   setTimeout(() => {\n//     setInterval(\n//       Notify.failure(\n//         `❌ Rejected promise ${position} in ${delayEl.value}ms`\n//       ),\n//       stepEl.value\n//     );\n//   }, delayEl.value)\n// );\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$delayEl","document","querySelector","$47d4ff9957288465$var$stepEl","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$submitBtn","$47d4ff9957288465$var$intervalID","$47d4ff9957288465$var$counter","$47d4ff9957288465$var$timeCounter","$47d4ff9957288465$var$position","addEventListener","setTimeout","setInterval","handleResult","value","position1","delay","Promise","resolve","reject","Math","random","then","Notify","success","catch","error","failure","clearInterval"],"version":3,"file":"03-promises.68cbe690.js.map"}