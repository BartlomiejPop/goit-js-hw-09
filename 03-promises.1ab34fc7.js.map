{"mappings":"gfAAA,IAQIA,EARJC,EAAAC,EAAA,SACMC,EAAUC,SAASC,cAAc,uBACjCC,EAASF,SAASC,cAAc,sBAChCE,EAAWH,SAASC,cAAc,wBAClCG,EAAYJ,SAASC,cAAc,yBACrCI,EAAU,EACVC,EAAc,EACdC,EAAW,EAkCXH,EAAMI,iBAAiB,SAAS,WAClCC,YAAW,WACTb,EAAac,YAAYC,EAAcT,EAAOU,M,GAC7Cb,EAAQa,OAEX,IAAMD,EAAe,WA7BE,IAACE,EAAUC,GAAVD,EA8BLN,EA9BeO,GA8BJf,EAAQa,QAASV,EAAOU,MAAQN,EA7BvD,IAAIS,SAAQ,SAACC,EAASC,GAQLC,KAAKC,SAAW,GAGpCH,EAAQ,uBAAwCI,OAAfP,EAAS,QAAYO,OAANN,EAAM,OAGtDG,EAAO,sBAAuCG,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,KAgBnDO,MAAK,SAAAL,G,OAAWnB,EAAAyB,OAAOC,QAAQP,E,IAC/BQ,OAAM,SAAAC,G,OAAS5B,EAAAyB,OAAOI,QAAQD,E,IACjCnB,IACAD,IACAE,KACKF,IAAaF,EAASS,QACzBP,EAAU,EACVE,EAAW,EACXD,EAAc,EACdqB,cAAc/B,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst delayEl = document.querySelector(\"input[name='delay']\");\nconst stepEl = document.querySelector(\"input[name='step']\");\nconst amountEl = document.querySelector(\"input[name='amount']\");\nconst submitBtn = document.querySelector(\"button[type='button']\");\nlet counter = 0;\nlet timeCounter = 1;\nlet position = 1;\nlet intervalID;\n\n// const intervalID = setInterval(\n//   myCallback,\n//   stepEl.value,\n//   'Parameter 1',\n//   'Parameter 2'\n// );\n\nconst generatePromises = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    // function createPromise(position, delay) {\n    // const intervalID = setInterval(\n    //   createResults,\n    //   stepEl.value,\n    //   amountEl.value\n    // );\n\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      // Fulfill\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      // Reject\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n\n    // }\n  });\n};\n\n//Dodać do funcki setInterval ,bo teraz zwraca tylko jedną wartość\n\nsubmitBtn.addEventListener('click', () => {\n  setTimeout(() => {\n    intervalID = setInterval(handleResult, stepEl.value);\n  }, delayEl.value);\n\n  const handleResult = () => {\n    generatePromises(position, +delayEl.value + +stepEl.value * timeCounter)\n      .then(resolve => Notify.success(resolve))\n      .catch(error => Notify.failure(error));\n    timeCounter++;\n    counter++;\n    position++;\n    if (+counter === +amountEl.value) {\n      counter = 0;\n      position = 1;\n      timeCounter = 1;\n      clearInterval(intervalID);\n    }\n  };\n});\n\n// .then(\n//   setTimeout(() => {\n//     setInterval(\n//       Notify.success(\n//         `✅ Fulfilled promise ${position} in ${delayEl.value}ms`\n//       ),\n//       stepEl.value\n//     );\n//   }, delayEl.value)\n// )\n// .catch(\n//   setTimeout(() => {\n//     setInterval(\n//       Notify.failure(\n//         `❌ Rejected promise ${position} in ${delayEl.value}ms`\n//       ),\n//       stepEl.value\n//     );\n//   }, delayEl.value)\n// );\n"],"names":["$ce04d3a99e08e73b$var$intervalID","$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$delayEl","document","querySelector","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$submitBtn","$ce04d3a99e08e73b$var$counter","$ce04d3a99e08e73b$var$timeCounter","$ce04d3a99e08e73b$var$position","addEventListener","setTimeout","setInterval","handleResult","value","position1","delay","Promise","resolve","reject","Math","random","concat","then","Notify","success","catch","error","failure","clearInterval"],"version":3,"file":"03-promises.1ab34fc7.js.map"}